apml_version: 1.0
metadata:
  title: "Vue Compiler Specification"
  author: "L3_WORKER"
  purpose: "Transform APML component specs into Vue 3 Single File Components"
  created: "2025-07-09T18:42:00Z"
  status: "ACTIVE"

compiler_overview:
  name: "APML-to-Vue Compiler"
  version: "0.1.0"
  input_format: "APML component specification"
  output_format: "Vue 3 Single File Component (.vue)"
  language_target: "Vue 3 Composition API"

transformation_rules:
  component_structure:
    apml_component:
      maps_to: "Vue SFC with <template>, <script>, <style>"
      template_section: "Generated from APML UI structure"
      script_section: "Generated from APML behavior and data"
      style_section: "Generated from APML styling rules"

  template_mapping:
    apml_elements:
      container:
        vue_element: "div"
        class_binding: "Apply APML layout classes"
        
      panel:
        vue_element: "div"
        attributes: ["class", "id", "data-panel"]
        
      button:
        vue_element: "button"
        event_binding: "Map APML actions to @click"
        
      input:
        vue_element: "input"
        v_model: "Auto-generate from APML data bindings"
        
      text:
        vue_element: "span"
        content: "Map APML text content"

  data_binding:
    apml_data:
      state_properties:
        maps_to: "Vue ref() or reactive()"
        example: "APML 'data.count' → Vue 'const count = ref(0)'"
        
      computed_properties:
        maps_to: "Vue computed()"
        example: "APML 'computed.total' → Vue 'const total = computed()'"
        
      props:
        maps_to: "Vue defineProps()"
        type_inference: "Generate TypeScript types from APML"

  event_handling:
    apml_actions:
      click_action:
        maps_to: "@click in Vue template"
        handler_function: "Generated in <script> section"
        
      form_submission:
        maps_to: "@submit.prevent"
        validation: "Add Vue validation logic"
        
      lifecycle_events:
        maps_to: "Vue lifecycle hooks (onMounted, etc.)"

  styling_rules:
    apml_styles:
      layout_properties:
        maps_to: "CSS Grid/Flexbox in <style> section"
        responsive: "Generate media queries for breakpoints"
        
      theme_variables:
        maps_to: "CSS custom properties"
        dark_mode: "Auto-generate dark theme variants"
        
      component_styles:
        scoped_styles: "Use <style scoped> by default"
        css_modules: "Optional CSS modules support"

input_specification:
  apml_component_format:
    required_sections:
      - metadata: "Component name, version, author"
      - structure: "UI layout and elements"
      - behavior: "Interactions and state management"
      - styling: "Visual design and responsive rules"
      
    example_input: |
      apml_version: 1.0
      metadata:
        name: "SimpleButton"
        type: "component"
        
      structure:
        container:
          type: "button"
          content: "{{ buttonText }}"
          actions:
            click: "handleClick"
            
      behavior:
        data:
          buttonText: "Click me"
          clickCount: 0
        methods:
          handleClick: "increment clickCount"
          
      styling:
        button:
          padding: "12px 24px"
          background: "#007bff"
          color: "white"
          border: "none"
          border_radius: "4px"

output_specification:
  vue_sfc_format:
    template_section: |
      <template>
        <button 
          class="simple-button"
          @click="handleClick"
        >
          {{ buttonText }}
        </button>
      </template>
      
    script_section: |
      <script setup>
      import { ref } from 'vue'
      
      const buttonText = ref('Click me')
      const clickCount = ref(0)
      
      const handleClick = () => {
        clickCount.value++
      }
      </script>
      
    style_section: |
      <style scoped>
      .simple-button {
        padding: 12px 24px;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }
      
      .simple-button:hover {
        background: #0056b3;
      }
      </style>

compiler_implementation:
  parser_phase:
    input_validation:
      - "Validate APML syntax and structure"
      - "Check required sections are present"
      - "Verify component name and metadata"
      
    ast_generation:
      - "Parse APML into Abstract Syntax Tree"
      - "Identify components, props, and dependencies"
      - "Map APML elements to Vue equivalents"

  transformation_phase:
    template_generation:
      - "Convert APML structure to Vue template"
      - "Add event bindings and directives"
      - "Generate conditional rendering logic"
      
    script_generation:
      - "Create Vue Composition API setup"
      - "Generate reactive data and computed properties"
      - "Add event handler functions"
      
    style_generation:
      - "Convert APML styling to scoped CSS"
      - "Generate responsive media queries"
      - "Add hover and focus states"

  optimization_phase:
    code_quality:
      - "Format generated code with Prettier"
      - "Add TypeScript type annotations"
      - "Generate JSDoc comments"
      
    performance:
      - "Optimize bundle size"
      - "Add lazy loading for large components"
      - "Generate efficient reactivity"

compilation_workflow:
  step_1_parse:
    description: "Parse APML file and validate syntax"
    input: "component.apml"
    output: "AST object"
    
  step_2_transform:
    description: "Transform APML AST to Vue AST"
    input: "APML AST"
    output: "Vue component structure"
    
  step_3_generate:
    description: "Generate Vue SFC code"
    input: "Vue component structure"
    output: "component.vue file"
    
  step_4_validate:
    description: "Validate generated Vue component"
    input: "component.vue"
    output: "Compilation success/errors"

error_handling:
  validation_errors:
    invalid_apml_syntax:
      message: "APML syntax error at line {line}"
      resolution: "Fix APML syntax and retry"
      
    missing_required_section:
      message: "Missing required section: {section}"
      resolution: "Add required section to APML file"
      
    invalid_component_name:
      message: "Component name must be PascalCase"
      resolution: "Update component name in metadata"

  transformation_errors:
    unsupported_element:
      message: "APML element '{element}' not supported"
      resolution: "Use supported element or extend compiler"
      
    circular_dependency:
      message: "Circular dependency detected in {component}"
      resolution: "Remove circular references"

  generation_errors:
    vue_syntax_error:
      message: "Generated Vue code has syntax error"
      resolution: "Check APML input and report compiler bug"

compiler_extensions:
  plugin_system:
    custom_elements:
      description: "Add support for custom APML elements"
      interface: "ElementTransformer"
      
    custom_directives:
      description: "Add custom Vue directives"
      interface: "DirectiveGenerator"
      
    styling_frameworks:
      description: "Support for Tailwind, Bootstrap, etc."
      interface: "StyleTransformer"

  advanced_features:
    typescript_support:
      description: "Generate TypeScript Vue components"
      config: "Enable with typescript: true"
      
    composition_functions:
      description: "Generate reusable composition functions"
      pattern: "Extract common logic to composables"
      
    unit_tests:
      description: "Auto-generate Vue Testing Library tests"
      output: "component.test.ts"

usage_examples:
  basic_component:
    description: "Simple button component"
    apml_file: "simple-button.apml"
    vue_output: "SimpleButton.vue"
    
  complex_component:
    description: "Multi-panel layout with state"
    apml_file: "visualize-panel.apml"
    vue_output: "VisualizePanel.vue"
    
  form_component:
    description: "Form with validation"
    apml_file: "contact-form.apml"
    vue_output: "ContactForm.vue"

integration_points:
  build_system:
    vite_plugin:
      description: "Vite plugin for APML compilation"
      config: "Add to vite.config.js"
      
    webpack_loader:
      description: "Webpack loader for APML files"
      config: "Add to webpack.config.js"
      
    development_server:
      description: "Hot reload support for APML changes"
      feature: "Auto-recompile on APML file changes"

  testing_integration:
    unit_tests:
      description: "Test generated Vue components"
      framework: "Vue Testing Library + Vitest"
      
    visual_regression:
      description: "Screenshot testing for UI components"
      tool: "Chromatic or Percy"
      
    e2e_tests:
      description: "End-to-end testing with Cypress"
      approach: "Test compiled components in real app"

deployment_considerations:
  production_build:
    optimization:
      - "Tree-shake unused APML features"
      - "Minify generated Vue code"
      - "Bundle common utilities"
      
    caching:
      - "Cache compiled components"
      - "Invalidate cache on APML changes"
      - "Version output files"

  performance_monitoring:
    compilation_time:
      - "Track APML compilation duration"
      - "Optimize slow transformations"
      - "Parallel compilation for large projects"
      
    runtime_performance:
      - "Monitor generated component performance"
      - "Optimize hot code paths"
      - "Bundle size analysis"

success_criteria:
  functional_requirements:
    - "Compile valid APML to working Vue components"
    - "Support all APML element types"
    - "Generate clean, readable Vue code"
    - "Preserve APML component behavior"
    
  performance_requirements:
    - "Compile simple components in <100ms"
    - "Support incremental compilation"
    - "Generated code performs well in browser"
    
  quality_requirements:
    - "Generated Vue code passes linting"
    - "Support TypeScript type checking"
    - "Maintain consistent code style"
    - "Include helpful error messages"

version_roadmap:
  v0_1_0:
    - "Basic APML to Vue compilation"
    - "Support core element types"
    - "Generate functional components"
    
  v0_2_0:
    - "Advanced styling support"
    - "Component composition"
    - "TypeScript generation"
    
  v1_0_0:
    - "Production-ready stability"
    - "Complete APML feature support"
    - "Plugin ecosystem"
    - "IDE integration"